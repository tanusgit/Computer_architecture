Question from book page 93-94	
1.	Symbolic constants
a. decimal25 = 25
b. binary25 = 11001b
c. octal25 = 31q
d. hexadecimal25 = 19h
2.	Yes, a program can have multiple code and multiple data segments. 
3.	
.data
sum DWORD 0
4.	Yes, we can assign negative value to a variable of type DWORD. That tells me that assembler has limited type checking.
5.	Following is the output:
 00000000			.code
 00000000			main proc
 00000000  83 C0 05			add eax, 5
 00000003  83 C2 05			add	edx, 5
					invoke ExitProcess,0
 00000006  6A 00	   *	    push   +000000000h
 00000008  E8 00000000 E   *	    call   ExitProcess
 0000000D			main endp
				end main

eax and edx differs by only one bit. If 15th(from left) bit is one then the register is edx.
6.	456789ABh
0000: AB
0001: 89
0002: 67
0003: 45
7.	.data
	smallArray DWORD 120 DUP(?)

8. .data
	smallArray BYTE 5 DUP("ABCDE")
9. .data
	word2 SDWORD -32768
10. .data
	wArray WORD 1,2,3
11. .data
	White BYTE "red",0
12. .data
	dArray SDWORD 50 DUP(?)
13. .data
	name BYTE 500 DUP("TEST")
14. .data
	bArray BYTE 20 DUP(0)
15. vall DWORD 87654321h
	0000: 21
	0001: 43
	0002: 65
	0003: 87




2.
; AddTwo.asm - adds two 32-bit integers.
; Chapter 3 example
INCLUDE Irvine32.inc

.386
.model flat,stdcall
.stack 4096
ExitProcess proto,dwExitCode:dword


.data
sum DWORD 0

; (A + B) - (C + D)
.code
main proc
	mov	eax, 5
	mov	ebx, 6
	add eax, ebx
	mov	ecx, 2
	mov	edx, 1
	add	ecx, edx
	sub eax, ecx
	mov sum, eax
	call DumpRegs
	invoke ExitProcess,0
main endp
end main

program output:

  EAX=00000008  EBX=00000006  ECX=00000003  EDX=00000001
  ESI=00000000  EDI=00000000  EBP=0018FF94  ESP=0018FF8C
  EIP=00403604  EFL=00000202  CF=0  SF=0  ZF=0  OF=0  AF=0  PF=0

Press any key to continue . . .
